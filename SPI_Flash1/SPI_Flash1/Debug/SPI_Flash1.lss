
SPI_Flash1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800200  00000308  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010c6  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cc8  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000636  00000000  00000000  00002266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060d  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f6  00000000  00000000  0000301d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e0       	ldi	r30, 0x08	; 8
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 35       	cpi	r26, 0x52	; 82
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e5       	ldi	r26, 0x52	; 82
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 35       	cpi	r26, 0x52	; 82
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ed d0       	rcall	.+474    	; 0x2fa <main>
 120:	f1 c0       	rjmp	.+482    	; 0x304 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <MCU_UART_init>:
	while (str[j]!=0) // Send string till null
	{
		UART_TxChar(str[j]);
		j++;
	}
}
 124:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 128:	88 e6       	ldi	r24, 0x68	; 104
 12a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
 12e:	e2 ed       	ldi	r30, 0xD2	; 210
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8f 73       	andi	r24, 0x3F	; 63
 136:	80 83       	st	Z, r24
 138:	80 81       	ld	r24, Z
 13a:	87 7f       	andi	r24, 0xF7	; 247
 13c:	80 83       	st	Z, r24
 13e:	80 81       	ld	r24, Z
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	80 83       	st	Z, r24
 144:	80 81       	ld	r24, Z
 146:	80 62       	ori	r24, 0x20	; 32
 148:	80 83       	st	Z, r24
 14a:	80 81       	ld	r24, Z
 14c:	86 60       	ori	r24, 0x06	; 6
 14e:	80 83       	st	Z, r24
 150:	e1 ed       	ldi	r30, 0xD1	; 209
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <MCU_SPI_init>:

void MCU_SPI_init(){
	SPCR |= (1<<MSTR | 1<<SPE); //Setting MSTR Bit and SPI_EN Bit
 15c:	8c b5       	in	r24, 0x2c	; 44
 15e:	80 65       	ori	r24, 0x50	; 80
 160:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<SPIF); //Disable SPI Interrupt
 162:	8c b5       	in	r24, 0x2c	; 44
 164:	8f 77       	andi	r24, 0x7F	; 127
 166:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X); //SPR2X = 1 --> set freq will be fosc/2 = 8MHz
 168:	8d b5       	in	r24, 0x2d	; 45
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	8d bd       	out	0x2d, r24	; 45
	DDRB |= (1<<PB1|1<<PB2); //MCU_SCK and MCU_MOSI as output
 16e:	84 b1       	in	r24, 0x04	; 4
 170:	86 60       	ori	r24, 0x06	; 6
 172:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PB3); //MCU_MISO as input
 174:	23 98       	cbi	0x04, 3	; 4
	PORTB |= (1<<PB3); //PULL UP for input
 176:	2b 9a       	sbi	0x05, 3	; 5
	DDRJ |= (1<<PJ3|1<<PJ6); //MCU_CE and MCU_HOLD as output
 178:	e4 e0       	ldi	r30, 0x04	; 4
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	80 81       	ld	r24, Z
 17e:	88 64       	ori	r24, 0x48	; 72
 180:	80 83       	st	Z, r24
	PORTJ |= (1<<PJ6); //Disable hold state (active low signal)
 182:	e5 e0       	ldi	r30, 0x05	; 5
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	80 81       	ld	r24, Z
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	80 83       	st	Z, r24
	DDRG |= (1<<PG0); //MCU_WP as output
 18c:	98 9a       	sbi	0x13, 0	; 19
	PORTG |= (1<<PG0); //Disable Write Protection (MCU_WP to high)
 18e:	a0 9a       	sbi	0x14, 0	; 20
 190:	08 95       	ret

00000192 <send_byte>:
}

void send_byte(unsigned char data){
	SPDR = data; //Load data into the SPDR register for transmission
 192:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //Wait until SPIF Flag is set to 1 ((SPSR & (1<<SPIF)) != 1)
 194:	0d b4       	in	r0, 0x2d	; 45
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <send_byte+0x2>
}
 19a:	08 95       	ret

0000019c <get_byte>:

unsigned char get_byte(){
	while(!(SPSR & (1<<SPIF))); //Waiting while SPDR is set with the received data byte and SPIF is set
 19c:	0d b4       	in	r0, 0x2d	; 45
 19e:	07 fe       	sbrs	r0, 7
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <get_byte>
	return (SPDR);
 1a2:	8e b5       	in	r24, 0x2e	; 46
}
 1a4:	08 95       	ret

000001a6 <wait_until_busy>:

void wait_until_busy(){ //check BUSY bit of status register
	PORTJ &= ~(1<<PJ3); //set CE to = 0 --> to enable chip
 1a6:	e5 e0       	ldi	r30, 0x05	; 5
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	80 81       	ld	r24, Z
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	80 83       	st	Z, r24
	char status;
	do{
		send_byte(0x05);
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	ef df       	rcall	.-34     	; 0x192 <send_byte>
		status = get_byte();
 1b4:	f3 df       	rcall	.-26     	; 0x19c <get_byte>
 1b6:	80 fd       	sbrc	r24, 0
	}while((status &(0x01)) == 0x01); //wait till BUSY == 0
 1b8:	fb cf       	rjmp	.-10     	; 0x1b0 <wait_until_busy+0xa>
 1ba:	e5 e0       	ldi	r30, 0x05	; 5
	PORTJ |= (1<<PJ3); //set CE to = 1 --> to disable chip
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	80 81       	ld	r24, Z
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	80 83       	st	Z, r24
 1c4:	08 95       	ret

000001c6 <set_write_enable>:
 1c6:	e5 e0       	ldi	r30, 0x05	; 5
}

void set_write_enable(){
	PORTJ &= ~(1<<PJ3);
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	80 81       	ld	r24, Z
 1cc:	87 7f       	andi	r24, 0xF7	; 247
 1ce:	80 83       	st	Z, r24
	char status;
	do{
		send_byte(0x06); //Set Write Enable
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	df df       	rcall	.-66     	; 0x192 <send_byte>
		//wait_until_busy();
		send_byte(0x05); //read status register
 1d4:	85 e0       	ldi	r24, 0x05	; 5
		status = get_byte();
 1d6:	dd df       	rcall	.-70     	; 0x192 <send_byte>
 1d8:	e1 df       	rcall	.-62     	; 0x19c <get_byte>
	}while ((status &(0x02)) != 0x02);
 1da:	81 ff       	sbrs	r24, 1
 1dc:	f9 cf       	rjmp	.-14     	; 0x1d0 <set_write_enable+0xa>
	PORTJ |= (1<<PJ3);
 1de:	e5 e0       	ldi	r30, 0x05	; 5
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	80 81       	ld	r24, Z
 1e4:	88 60       	ori	r24, 0x08	; 8
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <SST_ChipErase>:
}

void SST_ChipErase(){
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
	PORTJ &= ~(1<<PJ3); //set CE to = 0 --> to enable chip
 1ee:	c5 e0       	ldi	r28, 0x05	; 5
 1f0:	d1 e0       	ldi	r29, 0x01	; 1
 1f2:	88 81       	ld	r24, Y
 1f4:	87 7f       	andi	r24, 0xF7	; 247
 1f6:	88 83       	st	Y, r24
	set_write_enable();
 1f8:	e6 df       	rcall	.-52     	; 0x1c6 <set_write_enable>
	send_byte(0x60); //Chip Erase Command also disables WEL
 1fa:	80 e6       	ldi	r24, 0x60	; 96
	wait_until_busy();
 1fc:	ca df       	rcall	.-108    	; 0x192 <send_byte>
 1fe:	d3 df       	rcall	.-90     	; 0x1a6 <wait_until_busy>
	PORTJ |= (1<<PJ3); //set CE to = 1 --> to disable chip
 200:	88 81       	ld	r24, Y
 202:	88 60       	ori	r24, 0x08	; 8
 204:	88 83       	st	Y, r24
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <AAI_write_start>:

void AAI_write_start(){
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	PORTJ &= ~(1<<PJ3); //set CE to = 0 --> to enable chip
 210:	c5 e0       	ldi	r28, 0x05	; 5
 212:	d1 e0       	ldi	r29, 0x01	; 1
 214:	88 81       	ld	r24, Y
 216:	87 7f       	andi	r24, 0xF7	; 247
 218:	88 83       	st	Y, r24
	set_write_enable();
 21a:	d5 df       	rcall	.-86     	; 0x1c6 <set_write_enable>
	send_byte(0xAD); //AAI write command
 21c:	8d ea       	ldi	r24, 0xAD	; 173
 21e:	b9 df       	rcall	.-142    	; 0x192 <send_byte>
	send_byte(0x00); //initial write address --> 000000h
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	b7 df       	rcall	.-146    	; 0x192 <send_byte>
	send_byte(0x00);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	b5 df       	rcall	.-150    	; 0x192 <send_byte>
	send_byte(0x00);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	b3 df       	rcall	.-154    	; 0x192 <send_byte>
 22c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	send_byte(*msg);
 230:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 234:	80 81       	ld	r24, Z
 236:	ad df       	rcall	.-166    	; 0x192 <send_byte>
 238:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	send_byte(*(msg+1));
 23c:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 240:	81 81       	ldd	r24, Z+1	; 0x01
 242:	a7 df       	rcall	.-178    	; 0x192 <send_byte>
 244:	b0 df       	rcall	.-160    	; 0x1a6 <wait_until_busy>
	wait_until_busy();
 246:	88 81       	ld	r24, Y
 248:	88 60       	ori	r24, 0x08	; 8
	PORTJ |= (1<<PJ3);
 24a:	88 83       	st	Y, r24
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
}
 250:	08 95       	ret

00000252 <AAI_remaining>:
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15

void AAI_remaining(){
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
	uint8_t i=2;
	while (*(msg+i) != '\0')
 25c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 260:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 264:	82 81       	ldd	r24, Z+2	; 0x02
 266:	88 23       	and	r24, r24
 268:	71 f1       	breq	.+92     	; 0x2c6 <AAI_remaining+0x74>
 26a:	68 94       	set
 26c:	ee 24       	eor	r14, r14
 26e:	e1 f8       	bld	r14, 1
 270:	f1 2c       	mov	r15, r1
 272:	12 e0       	ldi	r17, 0x02	; 2
	{
		PORTJ &= ~(1<<PJ3); //set CE to = 0 --> to enable chip
 274:	c5 e0       	ldi	r28, 0x05	; 5
 276:	d1 e0       	ldi	r29, 0x01	; 1
 278:	88 81       	ld	r24, Y
 27a:	87 7f       	andi	r24, 0xF7	; 247
 27c:	88 83       	st	Y, r24
		send_byte(0xAD);
 27e:	8d ea       	ldi	r24, 0xAD	; 173
 280:	88 df       	rcall	.-240    	; 0x192 <send_byte>
		send_byte(*(msg+i));i++;
 282:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 286:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 28a:	ee 0d       	add	r30, r14
 28c:	ff 1d       	adc	r31, r15
 28e:	80 81       	ld	r24, Z
 290:	80 df       	rcall	.-256    	; 0x192 <send_byte>
		send_byte(*(msg+i));i++;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	81 0f       	add	r24, r17
 296:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 29a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 29e:	e8 0f       	add	r30, r24
 2a0:	f1 1d       	adc	r31, r1
 2a2:	80 81       	ld	r24, Z
 2a4:	76 df       	rcall	.-276    	; 0x192 <send_byte>
		wait_until_busy();
 2a6:	1e 5f       	subi	r17, 0xFE	; 254
 2a8:	7e df       	rcall	.-260    	; 0x1a6 <wait_until_busy>
		PORTJ |= (1<<PJ3); //set CE to = 1 --> to disable chip
 2aa:	88 81       	ld	r24, Y
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	88 83       	st	Y, r24
	PORTJ |= (1<<PJ3);
}

void AAI_remaining(){
	uint8_t i=2;
	while (*(msg+i) != '\0')
 2b0:	e1 2e       	mov	r14, r17
 2b2:	f1 2c       	mov	r15, r1
 2b4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2b8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2bc:	ee 0d       	add	r30, r14
 2be:	ff 1d       	adc	r31, r15
 2c0:	80 81       	ld	r24, Z
 2c2:	81 11       	cpse	r24, r1
 2c4:	d9 cf       	rjmp	.-78     	; 0x278 <AAI_remaining+0x26>
		send_byte(*(msg+i));i++;
		wait_until_busy();
		PORTJ |= (1<<PJ3); //set CE to = 1 --> to disable chip
	}

}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	08 95       	ret

000002d2 <write_data>:

void write_data(){ //write value from 0 to 255 @ address 000000h to 0000ffh

	//set_write_enable();

	AAI_write_start();
 2d2:	9c df       	rcall	.-200    	; 0x20c <AAI_write_start>
	AAI_remaining();
 2d4:	be df       	rcall	.-132    	; 0x252 <AAI_remaining>
 2d6:	e5 e0       	ldi	r30, 0x05	; 5

	PORTJ &= ~(1<<PJ3); //set CE to = 0 --> to enable chip
 2d8:	f1 e0       	ldi	r31, 0x01	; 1
 2da:	80 81       	ld	r24, Z
 2dc:	87 7f       	andi	r24, 0xF7	; 247
 2de:	80 83       	st	Z, r24
	char status;
	do{
		send_byte(0x04); //Disable WEL
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	57 df       	rcall	.-338    	; 0x192 <send_byte>
		//wait_until_busy();
		send_byte(0x05); //read status register
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	55 df       	rcall	.-342    	; 0x192 <send_byte>
 2e8:	59 df       	rcall	.-334    	; 0x19c <get_byte>
		status = get_byte();
 2ea:	81 fd       	sbrc	r24, 1
 2ec:	f9 cf       	rjmp	.-14     	; 0x2e0 <write_data+0xe>
	}while ((status &(0x02)) == 0x02);
 2ee:	e5 e0       	ldi	r30, 0x05	; 5
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
	PORTJ |= (1<<PJ3); //set CE to = 1 --> to disable chip
 2f2:	80 81       	ld	r24, Z
 2f4:	88 60       	ori	r24, 0x08	; 8
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <main>:
 2fa:	30 df       	rcall	.-416    	; 0x15c <MCU_SPI_init>
 2fc:	13 df       	rcall	.-474    	; 0x124 <MCU_UART_init>

int main(void)
{
	MCU_SPI_init();
	MCU_UART_init();
	SST_ChipErase();
 2fe:	75 df       	rcall	.-278    	; 0x1ea <SST_ChipErase>
 300:	e8 df       	rcall	.-48     	; 0x2d2 <write_data>
	while (1)
	{
		write_data();
 302:	fe cf       	rjmp	.-4      	; 0x300 <main+0x6>

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
