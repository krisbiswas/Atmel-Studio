
led_matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000000d0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c2  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000626  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b0  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB = 0x1f;	//Column
  96:	8f e1       	ldi	r24, 0x1F	; 31
  98:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x1f;	//Row
  9a:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0x00;
  9c:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
  9e:	1b b8       	out	0x0b, r1	; 11
	
    while (1) 
    {
		for(int i=0;i<5;i++){
			PORTD = ~(1<<i);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f1 e0       	ldi	r31, 0x01	; 1
	PORTB = 0x00;
	PORTD = 0x00;
	
    while (1) 
    {
		for(int i=0;i<5;i++){
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
			PORTD = ~(1<<i);
  ac:	9a 01       	movw	r18, r20
  ae:	08 2e       	mov	r0, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x20>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <main+0x1c>
  ba:	20 95       	com	r18
  bc:	2b b9       	out	0x0b, r18	; 11
			PORTB = array[0][i];
  be:	21 91       	ld	r18, Z+
  c0:	25 b9       	out	0x05, r18	; 5
	PORTB = 0x00;
	PORTD = 0x00;
	
    while (1) 
    {
		for(int i=0;i<5;i++){
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	85 30       	cpi	r24, 0x05	; 5
  c6:	91 05       	cpc	r25, r1
  c8:	69 f3       	breq	.-38     	; 0xa4 <main+0xe>
  ca:	f0 cf       	rjmp	.-32     	; 0xac <main+0x16>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
